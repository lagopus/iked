#!/bin/bash

#
# Copyright 2018 - 2020 Nippon Telegraph and Telephone Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

mount_bind() {
    ns_point=$1
    vrf_dir=$2
    dest_dir=$3

    mnt=$(findmnt -P "${NS_DIR}")
    if [ -z "${mnt}" ]; then
        mount --bind "${NS_DIR}" "${NS_DIR}" || exit 1
        mount --make-private "${NS_DIR}" || exit 1
    fi

    unshare --mount="${ns_point}" mount --bind "${vrf_dir}" "${dest_dir}" || exit 1
}

## public.

# @fn error()
# @brief Puts error.
# @param Messages.
error() {
    echo "$@" 1>&2
}

# @fn start()
# @brief Execute command in namespace of each VRF for start.
# @param callback_func Callback func.
# @param any_args Args to pass through to callback func.
# @details Callback func args are "ns_file", "vrf" and "any_args".
start() {
    # parse args.
    callback_func=$1
    if [ "x$callback_func" = "x" ]; then
        error "callback func is none."
        exit 1
    fi
    any_args=${@:2}

    if [ ! -d "${NS_DIR}" ]; then
        mkdir -p "${NS_DIR}" || exit 1
    fi
    vrf_dirs=$(find "${VRF_DIR}" -maxdepth 1 -type d -name \*vrf\*)
    for vrf_dir in ${vrf_dirs}
    do
        vrf=$(basename "${vrf_dir}")
        ns_file="${NS_DIR}/${vrf}"
        touch "${ns_file}" || exit 1
        mount_bind  "${ns_file}" "${vrf_dir}" "${IPSEC_ETC_DIR}"
        ${callback_func} "${ns_file}" "${vrf}" ${any_args}
    done
}

# @fn stop()
# @brief Execute command in namespace of each VRF for stop.
# @param callback_func Callback func.
# @param any_args Args to pass through to callback func.
# @details Callback func args are "ns_file", "vrf" and "any_args".
stop() {
    # parse args.
    callback_func=$1
    if [ "x$callback_func" = "x" ]; then
        error "callback func is none."
        exit 1
    fi
    any_args=${@:2}

    if [ ! -d "${NS_DIR}" ]; then
        return 0
    fi
    ns_files=$(find "${NS_DIR}" -maxdepth 1 -type f)
    if [ -z "${ns_files}" ]; then
        return 0
    fi
    for ns_file in ${ns_files}
    do
        if [ ! -w "${ns_file}" ]; then
            vrf=$(basename "${ns_file}")
            ${callback_func} "${ns_file}" "${vrf}" ${any_args}
            umount "${ns_file}" || exit 1
        fi
        rm -f "${ns_file}" || exit 1
    done
}

# @fn exec_cmd()
# @brief Execute command in namespace of each VRF.
# @param callback_func Callback func.
# @param any_args Args to pass through to callback func.
# @details Callback func args are "ns_file", "vrf" and "any_args".
exec_cmd() {
    # parse args.
    callback_func=$1
    if [ "x$callback_func" = "x" ]; then
        error "callback func is none."
        exit 1
    fi
    any_args=${@:2}

    if [ ! -d "${NS_DIR}" ]; then
        return 0
    fi
    ns_files=$(find "${NS_DIR}" -maxdepth 1 -type f)
    if [ -z "${ns_files}" ]; then
        return 0
    fi
    for ns_file in ${ns_files}
    do
        if [ ! -w "${ns_file}" ]; then
            vrf=$(basename "${ns_file}")
            echo ${vrf}
            ${callback_func} "${ns_file}" "${vrf}" ${any_args}
        fi
    done
}
